{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Getting Started with CML Readers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cmlreaders as cml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finding Files on Rino\n",
    "\n",
    "The PathFinder helper class can be used to locate files on RHINO. It's sole responsibility is to locate and return the file path of the file. In many cases, a file could be located in more than one location. In these situations, PathFinder will search over the list of possible locations and return the path where the file is first found. Implicitly, this assumes that the order of the file locations is prioritized such that the preferred location comes before a fall-back location. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# If not working on RHINO, specify the mount point\n",
    "rhino_root = \"/Volumes/RHINO/\"\n",
    "\n",
    "# Instantiate the finder object\n",
    "finder = cml.PathFinder(subject=\"R1389J\", experiment=\"catFR5\", session=\"1\", \n",
    "                        localization=\"0\", montage=\"0\", rootdir=rhino_root)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What can you request?\n",
    "\n",
    "The PathFinder has a few built-in properties to help you understand what data types are currently supported. Different file types require that the finder be instantiated with different fields. For example, if you are planning to request localization files, there is no need to specify an experiment, session, or montage. However, it is not a problem to specify too many fields, as an extraneous ones will simply be ignored if the data type does not require that it be given. The following properties are defined:\n",
    "- requestable_files: All supported data types\n",
    "- localization_files: Files related to localization\n",
    "- montage_files: Files associated with a specific montage\n",
    "- session_files: Files that are specific to a session. This files could be processed events, Ramulator files, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['protocols_database',\n",
       " 'voxel_coordinates',\n",
       " 'prior_stim_results',\n",
       " 'electrode_coordinates',\n",
       " 'jacksheet',\n",
       " 'area',\n",
       " 'electrode_categories',\n",
       " 'good_leads',\n",
       " 'leads',\n",
       " 'classifier_excluded_leads',\n",
       " 'localization',\n",
       " 'pairs',\n",
       " 'contacts',\n",
       " 'session_summary',\n",
       " 'classifier_summary',\n",
       " 'math_summary',\n",
       " 'target_selection_table',\n",
       " 'trained_classifier',\n",
       " 'all_events',\n",
       " 'task_events',\n",
       " 'math_events',\n",
       " 'ps4_events',\n",
       " 'sources',\n",
       " 'experiment_log',\n",
       " 'session_log',\n",
       " 'ramulator_session_folder',\n",
       " 'event_log',\n",
       " 'experiment_config',\n",
       " 'raw_eeg',\n",
       " 'odin_config',\n",
       " 'used_classifier',\n",
       " 'excluded_pairs',\n",
       " 'all_pairs']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finder.requestable_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['voxel_coordinates',\n",
       " 'prior_stim_results',\n",
       " 'electrode_coordinates',\n",
       " 'jacksheet',\n",
       " 'good_leads',\n",
       " 'leads',\n",
       " 'area',\n",
       " 'classifier_excluded_leads',\n",
       " 'localization',\n",
       " 'electrode_categories']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finder.localization_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['pairs', 'contacts']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finder.montage_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['session_summary',\n",
       " 'classifier_summary',\n",
       " 'math_summary',\n",
       " 'used_classifier',\n",
       " 'excluded_pairs',\n",
       " 'all_pairs',\n",
       " 'experiment_log',\n",
       " 'session_log',\n",
       " 'event_log',\n",
       " 'experiment_config',\n",
       " 'raw_eeg',\n",
       " 'odin_config',\n",
       " 'all_events',\n",
       " 'task_events',\n",
       " 'math_events',\n",
       " 'ps4_events']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finder.session_files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Finding File Paths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Volumes/RHINO/protocols/r1/subjects/R1389J/localizations/0/montages/0/neuroradiology/current_processed/pairs.json\n",
      "/Volumes/RHINO/protocols/r1/subjects/R1389J/experiments/catFR5/sessions/1/behavioral/current_processed/task_events.json\n",
      "/Volumes/RHINO/data10/RAM/subjects/R1389J/tal/VOX_coords_mother.txt\n"
     ]
    }
   ],
   "source": [
    "# Find some example files\n",
    "example_data_types = ['pairs', 'task_events', 'voxel_coordinates']\n",
    "for data_type in example_data_types:\n",
    "    print(finder.find(data_type=data_type))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading Data\n",
    "\n",
    "In most cases, the end goal is to load the data into memory rather than just locating the file. In this case, CML Readers provides a handy class to unify the API for loading data. By default, the location will be determined automatically based on the file type using the PathFinder class. However, a custom path can be given by using the file_path keyword. Each data type can be loaded into one of three common data structures for performing analyses:\n",
    "1. Pandas Dataframe\n",
    "2. Python Dictionary\n",
    "3. Numpy recarray\n",
    "\n",
    "Although recarray's are supported, users are **highly** encouraged to switch to using pandas dataframes as they provide a much richer and easier to use API. In fact, pandas was created specifically to replace recarrays. If you can find a data-analysis related use case that a recarray provides that is not available in pandas, I will personally give you $1. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "reader = cml.CMLReader(subject=\"R1389J\", experiment=\"catFR5\", session=\"1\", \n",
    "                       localization=\"0\", montage=\"0\", rootdir=rhino_root)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "reader.load(\"electrode_coordinates\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>contact_name</th>\n",
       "      <th>contact_type</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>atlas</th>\n",
       "      <th>orient_to</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>oA1</td>\n",
       "      <td>D</td>\n",
       "      <td>0.867173</td>\n",
       "      <td>-0.308800</td>\n",
       "      <td>-0.077759</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>oA2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>oA8</td>\n",
       "      <td>D</td>\n",
       "      <td>1.265359</td>\n",
       "      <td>-0.102247</td>\n",
       "      <td>-0.048478</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>oA2</td>\n",
       "      <td>D</td>\n",
       "      <td>0.913253</td>\n",
       "      <td>-0.278048</td>\n",
       "      <td>-0.083519</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>oA3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>oA3</td>\n",
       "      <td>D</td>\n",
       "      <td>0.984687</td>\n",
       "      <td>-0.248392</td>\n",
       "      <td>-0.071328</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>oA4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>oA4</td>\n",
       "      <td>D</td>\n",
       "      <td>1.048341</td>\n",
       "      <td>-0.212167</td>\n",
       "      <td>-0.074716</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>oA5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  contact_name contact_type         x         y         z           atlas  \\\n",
       "0          oA1            D  0.867173 -0.308800 -0.077759  monopolar_orig   \n",
       "1          oA8            D  1.265359 -0.102247 -0.048478  monopolar_orig   \n",
       "2          oA2            D  0.913253 -0.278048 -0.083519  monopolar_orig   \n",
       "3          oA3            D  0.984687 -0.248392 -0.071328  monopolar_orig   \n",
       "4          oA4            D  1.048341 -0.212167 -0.074716  monopolar_orig   \n",
       "\n",
       "  orient_to  \n",
       "0       oA2  \n",
       "1       NaN  \n",
       "2       oA3  \n",
       "3       oA4  \n",
       "4       oA5  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data Frame\n",
    "electrode_coord_df = reader.as_dataframe()\n",
    "electrode_coord_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'contact_name': 'oA1',\n",
       "  'contact_type': 'D',\n",
       "  'x': 0.867173,\n",
       "  'y': -0.3088,\n",
       "  'z': -0.07775927156960215,\n",
       "  'atlas': 'monopolar_orig',\n",
       "  'orient_to': 'oA2'},\n",
       " {'contact_name': 'oA8',\n",
       "  'contact_type': 'D',\n",
       "  'x': 1.2653590000000001,\n",
       "  'y': -0.1022474,\n",
       "  'z': -0.048477514623626164,\n",
       "  'atlas': 'monopolar_orig',\n",
       "  'orient_to': nan},\n",
       " {'contact_name': 'oA2',\n",
       "  'contact_type': 'D',\n",
       "  'x': 0.9132530000000001,\n",
       "  'y': -0.278048,\n",
       "  'z': -0.08351888482911221,\n",
       "  'atlas': 'monopolar_orig',\n",
       "  'orient_to': 'oA3'},\n",
       " {'contact_name': 'oA3',\n",
       "  'contact_type': 'D',\n",
       "  'x': 0.9846870000000001,\n",
       "  'y': -0.248392,\n",
       "  'z': -0.07132760474565615,\n",
       "  'atlas': 'monopolar_orig',\n",
       "  'orient_to': 'oA4'},\n",
       " {'contact_name': 'oA4',\n",
       "  'contact_type': 'D',\n",
       "  'x': 1.0483410000000002,\n",
       "  'y': -0.2121674,\n",
       "  'z': -0.07471577238168621,\n",
       "  'atlas': 'monopolar_orig',\n",
       "  'orient_to': 'oA5'}]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dictionary\n",
    "electrode_coord_dict = reader.as_dict()\n",
    "electrode_coord_dict[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rec.array([(0, 'oA1', 'D', 0.867173, -0.3088   , -0.07775927, 'monopolar_orig', 'oA2'),\n",
       "           (1, 'oA8', 'D', 1.265359, -0.1022474, -0.04847751, 'monopolar_orig', nan),\n",
       "           (2, 'oA2', 'D', 0.913253, -0.278048 , -0.08351888, 'monopolar_orig', 'oA3'),\n",
       "           (3, 'oA3', 'D', 0.984687, -0.248392 , -0.0713276 , 'monopolar_orig', 'oA4'),\n",
       "           (4, 'oA4', 'D', 1.048341, -0.2121674, -0.07471577, 'monopolar_orig', 'oA5')],\n",
       "          dtype=[('index', '<i8'), ('contact_name', 'O'), ('contact_type', 'O'), ('x', '<f8'), ('y', '<f8'), ('z', '<f8'), ('atlas', 'O'), ('orient_to', 'O')])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DO NOT USE: Recarray\n",
    "electrode_coord_recarray = reader.as_recarray()\n",
    "electrode_coord_recarray[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving Data\n",
    "\n",
    "CML Readers supports saving data to at most 3 file formats:\n",
    "1. CSV\n",
    "2. JSON\n",
    "3. HDF5\n",
    "\n",
    "However, depending on the data type, not all output formats may be supported. In particular, HDF5 output is only supported for a minimal number of data types. Data that has been saved using one of the built-in methods can always be reloaded using it's corresponding reader. Since locations are automatically determined based on the data type, if loading from a custom location, be sure to specify the file_type parameter when loading the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "reader.to_csv(\"electrode_coordinates_test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "reader.load(data_type=\"electrode_coordinates\", file_path=\"./electrode_coordinates_test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>contact_name</th>\n",
       "      <th>contact_type</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>atlas</th>\n",
       "      <th>orient_to</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>oA1</td>\n",
       "      <td>D</td>\n",
       "      <td>0.867173</td>\n",
       "      <td>-0.308800</td>\n",
       "      <td>-0.077759</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>oA2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>oA8</td>\n",
       "      <td>D</td>\n",
       "      <td>1.265359</td>\n",
       "      <td>-0.102247</td>\n",
       "      <td>-0.048478</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>oA2</td>\n",
       "      <td>D</td>\n",
       "      <td>0.913253</td>\n",
       "      <td>-0.278048</td>\n",
       "      <td>-0.083519</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>oA3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>oA3</td>\n",
       "      <td>D</td>\n",
       "      <td>0.984687</td>\n",
       "      <td>-0.248392</td>\n",
       "      <td>-0.071328</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>oA4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>oA4</td>\n",
       "      <td>D</td>\n",
       "      <td>1.048341</td>\n",
       "      <td>-0.212167</td>\n",
       "      <td>-0.074716</td>\n",
       "      <td>monopolar_orig</td>\n",
       "      <td>oA5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  contact_name contact_type         x         y         z           atlas  \\\n",
       "0          oA1            D  0.867173 -0.308800 -0.077759  monopolar_orig   \n",
       "1          oA8            D  1.265359 -0.102247 -0.048478  monopolar_orig   \n",
       "2          oA2            D  0.913253 -0.278048 -0.083519  monopolar_orig   \n",
       "3          oA3            D  0.984687 -0.248392 -0.071328  monopolar_orig   \n",
       "4          oA4            D  1.048341 -0.212167 -0.074716  monopolar_orig   \n",
       "\n",
       "  orient_to  \n",
       "0       oA2  \n",
       "1       NaN  \n",
       "2       oA3  \n",
       "3       oA4  \n",
       "4       oA5  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "electrode_coord_df = reader.as_dataframe()\n",
    "electrode_coord_df.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
